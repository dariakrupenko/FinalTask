package main.by.epam.admissionweb.command;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import main.by.epam.admissionweb.command.exception.CommandException;

/**
 * Интерфейс <code>Command</code> реализуется классами, которые инкапсулируют
 * алгоритм выполнения команды по обработке HTTP-запроса.
 * <p>
 * Команда - промежуточный слой между контроллером (получение запроса клиента) и
 * сервисом (логика приложения). Команда предназначена для обработки параметров
 * запроса и передачи их сервису в нужном формате данных.
 * <p>
 * При реализации интерфейса <code>Command</code> не рекомендуется обеспечивать
 * выполнение логики приложения. Вместо этого команда должна обращаться к
 * объекту класса, реализующего один из интерфейсов сервисов приложения. Команда может
 * обращаться несколько раз к разным сервисам.
 * <p>
 * Реализация интерфейса <code>Command</code> предназначена для доступа к
 * параметрам HTTP-запроса и их преобразования из строкового формата в логически
 * соответствующий формат данных. В свою очередь, команда не валидирует
 * параметры запроса исходя из логики приложения. Из полученных параметров
 * команда конструирует объект модели данных (сущность) и передает ее далее на
 * слой сервисов.
 * <p>
 * Интерфейс <code>Command</code> определяет единственный метод
 * <code>execute()</code>, в котором реализуется алгоритм выполнения конкретной
 * команды. Для выполнения действий, общих для всех конкретных команд, объект
 * команды обращается к объекту класса {@link CommandHelper}, который
 * обеспечивает выполнение таких действий, как перенаправление запроса на нужную
 * страницу, обработка определенного вида параметров и т.д.
 * <p>
 * В результате своего выполнения, команда должна установить соответствующие
 * атрибуты в контекст запроса/сессии с целью информирования клиента о
 * результате выполнения его запроса (завершился ли запрос успешно или в
 * результате возникла ошибка). Также команда на основе полученных
 * параметров/атрибутов запроса/сессии, а также на основе результатов работы
 * сервиса принимает решение, на какую страницу необходимо перенаправить запрос
 * или какой команде передать управление для дальнейшей обработки.
 * <p>
 * Для получения объекта соответсующей команды используется фабрика
 * {@link CommandFactory}.
 * 
 * @author Daria Krupenko
 * 
 * @see Controller
 * @see CommandFactory
 * @see CommandHelper
 *
 */
public interface Command {

	/**
	 * Метод <code>execute</code> описывает алгоритм выполнения конкретной
	 * команды по обработке HTTP-запроса.
	 * <p>
	 * Метод получает доступ к параметрам HTTP-запроса посредством параметра
	 * <code>request</code>, который является объектом класса
	 * <code>HttpServletRequest</code>. Через этот же параметр метод получает
	 * доступ к сессии клиента.
	 * <p>
	 * В процессе выполнения метод обращается к объекту класса
	 * {@link CommandHelper} для выполнения общих для всех команд действий, а
	 * также к объектам классов, реализующих интерфейсы сервисов приложения. В
	 * результате выполнения метод перенаправляет запрос клиента на нужную
	 * страницу или нужной команде.
	 * <p>
	 * Если в результате работы сервиса возникла ошибка, метод установит в
	 * контекст запроса флаг ошибки и продолжит работу
	 * 
	 * @param request
	 *            объект класса <code>HttpServletRequest</code>, представляющий
	 *            контекст HTTP-запроса; предназначен для доступ к параметрам и
	 *            атрибутам запроса, а также для получения сессии (объект класса
	 *            <code>HttpSession</code>)
	 * @param response
	 *            объект класса <code>HttpServletResponse</code>, представляющий
	 *            контекст ответа на HTTP-запрос
	 * @throws CommandException
	 *             если произошла ошибка при перенаправлении запроса на нужную
	 *             страницу или нужной команде
	 * @throws NullPoinerException
	 *             если параметры <code>request</code>, <code>response</code>
	 *             равны null.
	 * @see HttpServletRequest
	 * @see HttpServletResponse
	 * @see HttpSession
	 */
	public void execute(HttpServletRequest request, HttpServletResponse response) throws CommandException;

}
